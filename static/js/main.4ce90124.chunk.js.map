{"version":3,"sources":["components/Card/index.js","components/Title/index.js","components/Wrapper/index.js","components/Top/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","onClick","clickFunction","id","alt","name","src","image","Title","children","Wrapper","Top","score","topscore","text","App","state","clickedOn","order","friends","rearange","event","preventDefault","targetId","target","console","log","tempOrder","length","number","Math","floor","random","indexOf","push","setState","this","map","i","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mlaAgBeA,MAbf,SAAcC,GACZ,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,gBAAiBC,QAASF,EAAMG,eAC7C,yBAAKC,GAAIJ,EAAMI,GAAIC,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,W,MCAxCC,MAJf,SAAeT,GACb,OAAO,wBAAIC,UAAU,SAASD,EAAMU,W,MCGvBC,MAJf,SAAiBX,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMU,W,MCS1BE,MAVf,SAAaZ,GACX,OACE,yBAAKC,UAAU,OACX,6BAAK,uCAAaD,EAAMa,MAAnB,eAAsCb,EAAMc,SAA5C,MACL,gCAAMd,EAAMe,KAAZ,OC2FOC,E,2MAxFbC,MAAQ,CACNC,UAAW,GACXC,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,IAC1CC,UACAP,MAAO,EACPC,SAAU,EACVC,KAAM,uC,EAKTM,SAAW,SAAAC,GACTA,EAAMC,iBACN,IAAIC,EAAWF,EAAMG,OAAOrB,GAC5BsB,QAAQC,IAAIH,GACZE,QAAQC,IAAI,eAEZ,IADA,IAAIC,EAAY,GACT,EAAKX,MAAMG,QAAQS,OAASD,EAAUC,QAAQ,CACpD,IAAIC,EAASC,KAAKC,MAAMD,KAAKE,SAAW,EAAKhB,MAAMG,QAAQS,QACvDD,EAAUM,QAAQJ,GAAU,GAC9BF,EAAUO,KAAKL,GAGlB,EAAKM,SAAS,CAACjB,MAAOS,IAClB,EAAKX,MAAMC,UAAUgB,QAAQZ,EAAMG,OAAOrB,IAAM,GACnD,EAAKa,MAAMC,UAAUiB,KAAKX,GAC1B,EAAKY,SAAS,CACZvB,MAAO,EAAKI,MAAMJ,MAAQ,EAC1BE,KAAM,yBAERW,QAAQC,IAAI,EAAKV,MAAMJ,OACnB,EAAKI,MAAMJ,QAAU,EAAKI,MAAMH,UAClC,EAAKsB,SAAS,CACZtB,SAAU,EAAKG,MAAMJ,MAAQ,IAGR,KAArB,EAAKI,MAAMJ,OACb,EAAKuB,SAAS,CACZvB,MAAO,EACPK,UAAW,GACXC,MAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,IAC/BJ,KAAM,cAKT,EAAKqB,SAAS,CACZvB,MAAO,EACPK,UAAW,GACXC,MAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,IAC/BJ,KAAM,qBAMVW,QAAQC,IAAI,EAAKV,MAAMC,Y,wEAUd,IAAD,OACP,OACE,6BACA,kBAAC,EAAD,CAAKL,MAAOwB,KAAKpB,MAAMJ,MAAOC,SAAUuB,KAAKpB,MAAMH,SAAUC,KAAMsB,KAAKpB,MAAMF,OAE9E,kBAAC,EAAD,KACE,kBAAC,EAAD,0BACCsB,KAAKpB,MAAME,MAAMmB,KAAI,SAAAC,GAAC,OACrB,kBAAC,EAAD,CACEpC,cAAe,EAAKkB,SACpBjB,GAAI,EAAKa,MAAMG,QAAQmB,GAAGnC,GAC1BoC,IAAK,EAAKvB,MAAMG,QAAQmB,GAAGnC,GAC3BE,KAAM,EAAKW,MAAMG,QAAQmB,GAAGjC,KAC5BE,MAAO,EAAKS,MAAMG,QAAQmB,GAAG/B,iB,GAjFvBiC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4ce90124.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"img-container\"  onClick={props.clickFunction}>\r\n        <img id={props.id} alt={props.name} src={props.image} />\r\n      </div>\r\n      {/* <span onClick={() => props.removeFriend(props.id)} className=\"remove\">\r\n        ùòÖ\r\n      </span> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Top(props) {\r\n  return (\r\n    <div className=\"top\">\r\n        <div><h3> Score: {props.score} Top Score: {props.topscore} </h3></div>\r\n        <h5> {props.text} </h5>\r\n    \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Top;","import React, { Component } from \"react\";\nimport friends from \"./friends.json\";\nimport Card from \"./components/Card\";\nimport Title from \"./components/Title\"\nimport Wrapper from \"./components/Wrapper\"\nimport Top from \"./components/Top\"\n// import FriendCard from \"./components/FriendCard\"\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    clickedOn: [],\n    order: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n    friends,\n    score: 0,\n    topscore: 0,\n    text: \"Don't click on the same card twice!\"\n  };\n\n  \n\n rearange = event => {\n   event.preventDefault(); \n   let targetId = event.target.id\n   console.log(targetId)\n   console.log('rearange go')\n   let tempOrder = []\n   while (this.state.friends.length > tempOrder.length) {\n    let number = Math.floor(Math.random() * this.state.friends.length);\n    if (tempOrder.indexOf(number) < 0) {\n      tempOrder.push(number);\n    }\n  }\n   this.setState({order: tempOrder}) \n   if (this.state.clickedOn.indexOf(event.target.id) < 0) {\n    this.state.clickedOn.push(targetId) \n    this.setState({\n      score: this.state.score + 1,\n      text: \"Good guess, go again\"\n    })\n    console.log(this.state.score)\n    if (this.state.score === this.state.topscore) {\n      this.setState({\n        topscore: this.state.score + 1        \n      })\n    }\n    if (this.state.score === 11 ) {\n      this.setState({\n        score: 0,\n        clickedOn: [],\n        order: [0,1,2,3,4,5,6,7,8,9,10,11],\n        text: \"YOU WIN!\"\n      })\n    }\n    \n   } else {\n     this.setState({\n       score: 0,\n       clickedOn: [],\n       order: [0,1,2,3,4,5,6,7,8,9,10,11],\n       text: \"Loser, Try Again\"\n     })\n   }\n   \n\n   \n   console.log(this.state.clickedOn)\n\n   \n   \n  //  clickedOn.push(this.state.card.id)\n  \n\n }\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <div>\n      <Top score={this.state.score} topscore={this.state.topscore} text={this.state.text}\n       />\n      <Wrapper>\n        <Title>X Men Memory Game</Title>\n        {this.state.order.map(i => (\n          <Card\n            clickFunction={this.rearange}\n            id={this.state.friends[i].id}\n            key={this.state.friends[i].id}\n            name={this.state.friends[i].name}\n            image={this.state.friends[i].image}\n          />\n        ))}\n      </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}